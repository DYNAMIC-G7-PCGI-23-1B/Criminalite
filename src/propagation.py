# -*- coding: utf-8 -*-
"""Copie de Untitled1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1cW5iLwaysVoH_p2JStpVYWHKE1snpVSN
"""

import numpy as np
import matplotlib.pyplot as plt
import random

seuil_crime_sans_controle = 0.4
seuil_crime_avec_controle = 0.7


#attribuer √† chaque individu une probabilit√© de commettre un vol
def probabilite_pour_un_individu() :
  NdC = 10
  NdL = 10
  grille = np.random.random((NdC,NdL))
  np.set_printoptions(precision=1)
  grille_crime = np.array(grille)

  print("Une probabilit√© affect√©e √† un individu: ")
  print(grille_crime)


#Si la probabilit√© de l'individu est sup√©rieur ou √©gal au seuil de crimininalit√©
#Sans contr√¥le 
#1√®re pr√©sentation : Tableau bool√©en (True:criminel ; False:No criminel)
#2√®me pr√©sentation : Tableau binaire (1: Criminel ; 0: No criminel)
#3√®me pr√©sentation : Tableau matplotlib

  bool_crime = [grille_crime >= seuil_crime_sans_controle]
  grille_bool_crime = np.array(bool_crime)
  print("Le Tableau Bool√©en identifiant les individus ayant fait un crime en abscence de contr√¥le:")
  print(grille_bool_crime)
  print("True : Criminels; False : Non Criminels")

  grille_2 = np.array(bool_crime) + 0
  print("Tableau binaire identifiant les individus ayant fait un crime en abscence de contr√¥le:")
  print(grille_2)
  print("1 : Criminels ; 0 : Non criminels")

   
  plt.imshow(grille,cmap='Set1')   
  plt.colorbar()

#Si la probabilit√© de l'individu est sup√©rieur ou √©gal au seuil de criminalit√©
#Avec contr√¥le
#1√®re pr√©sentation : Tableau bool√©en (True:criminel ; False:No criminel)
#2√®me pr√©sentation : Tableau binaire (1: Criminel ; 0: No criminel)

  bool_crime_2= [grille_crime >= seuil_crime_avec_controle]
  grille_bool_crime_2 = np.array(bool_crime_2)
  print("Le Tableau Bool√©en identifiant les individus ayant fait un crime en pr√©sence de contr√¥le:")
  print(grille_bool_crime_2)
  print("True : Criminels; False : Non Criminels")

  grille_crime_3 = np.array(bool_crime_2) + 0
  print("Tableau binaire identifiant les individus ayant fait un crime en pr√©sence de contr√¥le:")
  print(grille_crime_3)
  print("1 : Criminels ; 0 : Non criminels")

#r√©alisation compteur
  compteur_1 = grille_bool_crime.sum()
  print("Le nombre de criminels en abscence de contr√¥le: ",compteur_1)
  compteur_2 = grille_bool_crime_2.sum()
  print("Le nombre de criminels en pr√©sence de contr√¥le: ",compteur_2)


#D√©termination du taux de criminalit√©
  taux_de_criminalite_1 = (compteur_1/(NdL*NdC))*100
  print("Le taux de criminalit√© en abscence de contr√¥le est: ",taux_de_criminalite_1,"%")
  taux_de_criminalite_2 = (compteur_2/(NdL*NdC))*100
  print("Le taux de criminalit√© en pr√©sence de contr√¥le est: ",taux_de_criminalite_2,"%")

# Evolution du nombre de criminels dans une population

from tkinter import *
from random import randrange

haut = 40 # hauteur du tableau
larg = 40 # largeur du tableau
cote = 15  # cr√©ation d'une cellule
rouge = 0
blanc = 1
nb_rouge = haut*larg
nb_blanc = 0

# Cr√©er les matrices
cell = [[0 for row in range(haut)] for col in range(larg)]
parti = [[rouge for row in range(haut)] for col in range(larg)]

# Dessiner toutes les cellules
def dessiner():
    for y in range(haut):
        for x in range(larg):
            if parti[x][y]==rouge:
                coul = "red"
            else:
                coul = "white"
            canvas.itemconfig(cell[x][y], fill=coul)

# Donn√©es initiales
def init():
    global nb_rouge, nb_noir
    nb_bleu, nb_noir = 0, 0
    nb_echanges = 0
    for y in range(haut):
        for x in range(larg):
            if nb_bleu < haut*larg/2:
                parti[x][y] = rouge
                nb_bleu += 1
            else:
                parti[x][y] = blanc
                nb_noir += 1
            cell[x][y] = canvas.create_rectangle((x*cote, y*cote, (x+1)*cote, (y+1)*cote), outline="gray", fill="red")
    # placer au hasard 50% de criminels de couleur bleu
    while nb_echanges < haut*larg:
        x1 = randrange(larg)
        y1 = randrange(haut)
        x2 = randrange(larg)
        y2 = randrange(haut)
        parti[x1][y1], parti[x2][y2] = parti[x2][y2], parti[x1][y1]
        nb_echanges += 1
    dessiner()

# Choisir l'opinion d'un des 8 voisins de la cellule (a,b) - tableau torique
def etat_voisin(a,b):
    voisin = randrange(8)
    if voisin==1:
        etat = parti[(a-1)%larg][(b+1)%haut]
    elif voisin==2:
        etat = parti[a][(b+1)%haut]
    elif voisin==3:
        etat = parti[(a+1)%larg][(b+1)%haut]
    elif voisin==4:
        etat = parti[(a-1)%larg][b]
    elif voisin==5:
        etat = parti[(a+1)%larg][b]
    elif voisin==6:
        etat = parti[(a-1)%larg][(b-1)%haut]
    elif voisin==7:
        etat = parti[a][(b-1)%haut]
    else:
        etat = parti[(a+1)%larg][(b-1)%haut]
    return etat

# Appliquer la r√®gle
def calculer():
    global nb_rouge, nb_blanc
    x = randrange(larg)
    y = randrange(haut)
    nouveau_criminel = etat_voisin(x,y)
    if parti[x][y] != nouveau_criminel:
        if nouveau_criminel == rouge:
            nb_rouge += 1
            nb_blanc -= 1
        else :
            nb_rouge -= 1
            nb_blanc += 1
        parti[x][y] = nouveau_criminel
        if parti[x][y] == rouge:
            coul = "red"
        else:
            coul = "white"

        canvas.itemconfig(cell[x][y], fill=coul)

# Calculer et dessiner le prochain tableau
def tableau():
    calculer()
    fenetre.after(1, tableau)

# Lancement du programme
fenetre = Tk()
fenetre.title("Criminelüî¥ Non Criminel‚ö™Ô∏è")
canvas = Canvas(fenetre, width=cote*larg, height=cote*haut, highlightthickness=0)
canvas.pack()
init()
tableau()
fenetre.mainloop()

